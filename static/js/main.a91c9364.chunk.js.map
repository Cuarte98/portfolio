{"version":3,"sources":["views/Home/Home.jsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","react_default","a","createElement","className","class","src","alt","data-target","id","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAEe,SAASA,IACtB,OACEC,EAAAC,EAAAC,cAAA,WAASC,UAAU,uCACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,UAAQE,MAAM,UACdJ,EAAAC,EAAAC,cAAA,OAAKE,MAAM,aACTJ,EAAAC,EAAAC,cAAA,OAAKE,MAAM,gBACTJ,EAAAC,EAAAC,cAAA,KAAGE,MAAM,eACPJ,EAAAC,EAAAC,cAAA,OAAKG,IAAI,+CAA+CC,IAAI,UAE9DN,EAAAC,EAAAC,cAAA,QAAME,MAAM,uBAAuBG,cAAY,mBAC7CP,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,eAGJF,EAAAC,EAAAC,cAAA,OAAKM,GAAG,kBAAkBJ,MAAM,eAC9BJ,EAAAC,EAAAC,cAAA,OAAKE,MAAM,cACTJ,EAAAC,EAAAC,cAAA,KAAGE,MAAM,yBAAT,QAGAJ,EAAAC,EAAAC,cAAA,KAAGE,MAAM,eAAT,YAGAJ,EAAAC,EAAAC,cAAA,KAAGE,MAAM,eAAT,iBAGAJ,EAAAC,EAAAC,cAAA,QAAME,MAAM,eACVJ,EAAAC,EAAAC,cAAA,KAAGE,MAAM,iCACPJ,EAAAC,EAAAC,cAAA,QAAME,MAAM,QACVJ,EAAAC,EAAAC,cAAA,KAAGE,MAAM,mBAEXJ,EAAAC,EAAAC,cAAA,+BAQVF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,qBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,wBAGJH,EAAAC,EAAAC,cAAA,OAAKE,MAAM,aACbJ,EAAAC,EAAAC,cAAA,OAAKE,MAAM,QACTJ,EAAAC,EAAAC,cAAA,OAAKE,MAAM,aACTJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIE,MAAM,aAAYJ,EAAAC,EAAAC,cAAA,sBACtBF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,uBACJF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,kBACJF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,sBACJF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,wBACJF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,yBCrDd,IASeO,EATO,WACpB,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACH,EAAD,QCKcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a91c9364.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Home() {\r\n  return (\r\n    <section className=\"hero is-light is-bold is-fullheight\">\r\n      <div className=\"hero-head\">\r\n      <header class=\"navbar\">\r\n      <div class=\"container\">\r\n        <div class=\"navbar-brand\">\r\n          <a class=\"navbar-item\">\r\n            <img src=\"https://bulma.io/images/bulma-type-white.png\" alt=\"Logo\" />\r\n          </a>\r\n          <span class=\"navbar-burger burger\" data-target=\"navbarMenuHeroC\">\r\n            <span></span>\r\n            <span></span>\r\n            <span></span>\r\n          </span>\r\n        </div>\r\n        <div id=\"navbarMenuHeroC\" class=\"navbar-menu\">\r\n          <div class=\"navbar-end\">\r\n            <a class=\"navbar-item is-active\">\r\n              Home\r\n            </a>\r\n            <a class=\"navbar-item\">\r\n              Examples\r\n            </a>\r\n            <a class=\"navbar-item\">\r\n              Documentation\r\n            </a>\r\n            <span class=\"navbar-item\">\r\n              <a class=\"button is-success is-inverted\">\r\n                <span class=\"icon\">\r\n                  <i class=\"fab fa-github\"></i>\r\n                </span>\r\n                <span>Download</span>\r\n              </a>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </header>\r\n      </div>\r\n      <div className=\"hero-body\">\r\n        <div className=\"container is-fluid\">\r\n          <h1 className=\"title\">Franco Cuarterolo</h1>\r\n          <h2 className=\"subtitle\">Frontend Developer</h2>\r\n        </div>\r\n      </div>\r\n      <div class=\"hero-foot\">\r\n    <nav class=\"tabs\">\r\n      <div class=\"container\">\r\n        <ul>\r\n          <li class=\"is-active\"><a>Overview</a></li>\r\n          <li><a>Modifiers</a></li>\r\n          <li><a>Grid</a></li>\r\n          <li><a>Elements</a></li>\r\n          <li><a>Components</a></li>\r\n          <li><a>Layout</a></li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n    </section>\r\n  );\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport Home from './views/Home/Home'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Home />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}